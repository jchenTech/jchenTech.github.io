<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Leetcode on jchen&#39;s blog</title>
    <link>http://jchenTech.github.io/categories/Leetcode/</link>
    <description>Recent content in Leetcode on jchen&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 24 Oct 2020 00:00:00 +0000</lastBuildDate><atom:link href="http://jchenTech.github.io/categories/Leetcode/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Leetcode连载 | 链表</title>
      <link>http://jchenTech.github.io/post/Leetcode/%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Sat, 24 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>http://jchenTech.github.io/post/Leetcode/%E9%93%BE%E8%A1%A8/</guid>
      <description>找出两个链表的交点 160. 相交链表(easy) 编写一个程序，找到两个单链表相交的起始节点。 如下面的两个链表： A: a1 → a2 ↘ c1 → c2 → c3 ↗ B: b1 → b2 → b3 在节点 c1 开始相交。 示例 1： 输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3 输出：Reference of the node with value = 8 输入解释：相交节点的值</description>
    </item>
    
    <item>
      <title>Leetcode连载 | 数组</title>
      <link>http://jchenTech.github.io/post/Leetcode/%E6%95%B0%E7%BB%84%E4%B8%8E%E7%9F%A9%E9%98%B5/</link>
      <pubDate>Fri, 23 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>http://jchenTech.github.io/post/Leetcode/%E6%95%B0%E7%BB%84%E4%B8%8E%E7%9F%A9%E9%98%B5/</guid>
      <description>移动零 283. 移动零 (Easy) 给定一个数组 `nums`，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。 示例: 输入: [0,1,0,3,12] 输出: [1,3,12,0,0] 说明: 1. 必须在原数组上操作，不能拷贝额外的数组。 2. 尽量减少操作次数。 class Solution { public void moveZeroes(int[] nums) { if (nums == null) { return; } //使用双指针i,j，用指针i遍历数组，用指针j记录</description>
    </item>
    
  </channel>
</rss>
